// Time Complexity : O(m + n)
// Space Complexity : O(min(m, n))
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        if(nums1 == null || nums2 == null) {
            return new int[] {};
        }
        int m = nums1.length;
        int n = nums2.length;
        if(m < n) {
            intersect(nums2, nums1);
        }
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < n; i++) {
            map.put(nums2[i], map.getOrDefault(nums2[i], 0) + 1);
        }
        List<Integer> result = new ArrayList<>();
        for(int i = 0; i < m; i++) {
            if(map.containsKey(nums1[i])) {
                result.add(nums1[i]);
                int cnt = map.get(nums1[i]);
                cnt--;
                map.put(nums1[i], cnt);
                map.remove(nums1[i], 0);
            }
        }
        int[] answer = new int[result.size()];
        for(int i = 0; i < result.size(); i++) {
            answer[i] = result.get(i);
        }
        return answer;
    }
}
